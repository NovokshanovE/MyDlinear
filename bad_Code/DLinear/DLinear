import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.metrics import mean_squared_error

# Определение размеров модели
input_size = 5 #n_steps
hidden_size = 4 #n_neurons
output_size = 1

# Определение модели
class TemporalModel(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(TemporalModel, self).__init__()
        self.hidden_size = hidden_size
        self.window_sizes = torch.randn(1, hidden_size)
        self.window_times = torch.randn(1, hidden_size)
        self.bias = torch.randn(1, output_size)

    def forward(self, x):
        ws = torch.matmul(x, self.window_sizes)
        wt = torch.matmul(x, self.window_times)
        ws_plus_wt = ws + wt
        ws_plus_wt_plus_bias = ws_plus_wt + self.bias
        return ws_plus_wt_plus_bias

# Создание экземпляра модели
model = TemporalModel(input_size, hidden_size, output_size)

# Определение функции потерь и оптимизатора
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Обучение модели
def train(model, criterion, optimizer, train_data, window_roll):
    for i in range(window_roll, len(train_data)):
        cut = int(i - window_roll * input_size)
        inputs = train_data[cut:cut + input_size].view(1, input_size, -1)
        labels = train_data[cut + input_size - 1:cut + input_size].view(1, -1)
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()


X_train = torch.rand((100, input_size))
window_roll = 10
train(model, criterion, optimizer, torch.tensor(X_train), window_roll)